// Generated by gencpp from file foundations_hw2/InterpolateResponse.msg
// DO NOT EDIT!


#ifndef FOUNDATIONS_HW2_MESSAGE_INTERPOLATERESPONSE_H
#define FOUNDATIONS_HW2_MESSAGE_INTERPOLATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <foundations_hw2/EulerAngles.h>
#include <foundations_hw2/EulerAngles.h>

namespace foundations_hw2
{
template <class ContainerAllocator>
struct InterpolateResponse_
{
  typedef InterpolateResponse_<ContainerAllocator> Type;

  InterpolateResponse_()
    : initial()
    , final()
    , seconds(0.0)  {
    }
  InterpolateResponse_(const ContainerAllocator& _alloc)
    : initial(_alloc)
    , final(_alloc)
    , seconds(0.0)  {
  (void)_alloc;
    }



   typedef  ::foundations_hw2::EulerAngles_<ContainerAllocator>  _initial_type;
  _initial_type initial;

   typedef  ::foundations_hw2::EulerAngles_<ContainerAllocator>  _final_type;
  _final_type final;

   typedef double _seconds_type;
  _seconds_type seconds;




  typedef boost::shared_ptr< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct InterpolateResponse_

typedef ::foundations_hw2::InterpolateResponse_<std::allocator<void> > InterpolateResponse;

typedef boost::shared_ptr< ::foundations_hw2::InterpolateResponse > InterpolateResponsePtr;
typedef boost::shared_ptr< ::foundations_hw2::InterpolateResponse const> InterpolateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::foundations_hw2::InterpolateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace foundations_hw2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'foundations_hw2': ['/home/cs4750/catkin/src/foundations_hw2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30b287eabe6b7c8311d43936111a65f8";
  }

  static const char* value(const ::foundations_hw2::InterpolateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30b287eabe6b7c83ULL;
  static const uint64_t static_value2 = 0x11d43936111a65f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "foundations_hw2/InterpolateResponse";
  }

  static const char* value(const ::foundations_hw2::InterpolateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "EulerAngles initial\n\
EulerAngles final\n\
float64 seconds\n\
\n\
\n\
================================================================================\n\
MSG: foundations_hw2/EulerAngles\n\
float64 phi\n\
float64 theta\n\
float64 psi\n\
";
  }

  static const char* value(const ::foundations_hw2::InterpolateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initial);
      stream.next(m.final);
      stream.next(m.seconds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InterpolateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::foundations_hw2::InterpolateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::foundations_hw2::InterpolateResponse_<ContainerAllocator>& v)
  {
    s << indent << "initial: ";
    s << std::endl;
    Printer< ::foundations_hw2::EulerAngles_<ContainerAllocator> >::stream(s, indent + "  ", v.initial);
    s << indent << "final: ";
    s << std::endl;
    Printer< ::foundations_hw2::EulerAngles_<ContainerAllocator> >::stream(s, indent + "  ", v.final);
    s << indent << "seconds: ";
    Printer<double>::stream(s, indent + "  ", v.seconds);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOUNDATIONS_HW2_MESSAGE_INTERPOLATERESPONSE_H
