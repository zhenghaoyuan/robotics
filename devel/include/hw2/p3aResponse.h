// Generated by gencpp from file hw2/p3aResponse.msg
// DO NOT EDIT!


#ifndef HW2_MESSAGE_P3ARESPONSE_H
#define HW2_MESSAGE_P3ARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hw2
{
template <class ContainerAllocator>
struct p3aResponse_
{
  typedef p3aResponse_<ContainerAllocator> Type;

  p3aResponse_()
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)  {
    }
  p3aResponse_(const ContainerAllocator& _alloc)
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)  {
  (void)_alloc;
    }



   typedef double _joint1_type;
  _joint1_type joint1;

   typedef double _joint2_type;
  _joint2_type joint2;

   typedef double _joint3_type;
  _joint3_type joint3;

   typedef double _joint4_type;
  _joint4_type joint4;




  typedef boost::shared_ptr< ::hw2::p3aResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hw2::p3aResponse_<ContainerAllocator> const> ConstPtr;

}; // struct p3aResponse_

typedef ::hw2::p3aResponse_<std::allocator<void> > p3aResponse;

typedef boost::shared_ptr< ::hw2::p3aResponse > p3aResponsePtr;
typedef boost::shared_ptr< ::hw2::p3aResponse const> p3aResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hw2::p3aResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hw2::p3aResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hw2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'foundations_hw2': ['/home/cs4750/catkin/src/foundations_hw2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hw2::p3aResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw2::p3aResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw2::p3aResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw2::p3aResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw2::p3aResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw2::p3aResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hw2::p3aResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb6e7c37be4d0e82de5529136096fb87";
  }

  static const char* value(const ::hw2::p3aResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb6e7c37be4d0e82ULL;
  static const uint64_t static_value2 = 0xde5529136096fb87ULL;
};

template<class ContainerAllocator>
struct DataType< ::hw2::p3aResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hw2/p3aResponse";
  }

  static const char* value(const ::hw2::p3aResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hw2::p3aResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 joint1\n\
float64 joint2\n\
float64 joint3\n\
float64 joint4\n\
\n\
";
  }

  static const char* value(const ::hw2::p3aResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hw2::p3aResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint1);
      stream.next(m.joint2);
      stream.next(m.joint3);
      stream.next(m.joint4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct p3aResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hw2::p3aResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hw2::p3aResponse_<ContainerAllocator>& v)
  {
    s << indent << "joint1: ";
    Printer<double>::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    Printer<double>::stream(s, indent + "  ", v.joint2);
    s << indent << "joint3: ";
    Printer<double>::stream(s, indent + "  ", v.joint3);
    s << indent << "joint4: ";
    Printer<double>::stream(s, indent + "  ", v.joint4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HW2_MESSAGE_P3ARESPONSE_H
